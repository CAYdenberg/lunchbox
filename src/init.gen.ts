/*
|----------------------------------|
| DO NOT MANUALLY CHANGE THIS FILE |
|---------------------------------------------------------------|
| This module is generated by the 'deno task init:generate'     |
| command and contains all the initialization code for a new    |
| project converted to strings easy to access for the 'init.ts' |
| module.                                                       |
|---------------------------------------------------------------|
*/

export const SRC_ATOMS = `
//     _  _
//    /_\\| |_ ___ _ __  ___
//   / _ \\  _/ _ \\ '  \\(_-<
//  /_/ \\_\\__\\___/_|_|_/__/
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * This is module manages the base of the hierarchy of the components of this library. The definition
 * of an Atom is a component made up of a 1/1 HTML element, because of this, they must be declared
 * using the type iAtom that links them to the properties of a 1/1 HTML element. The rendered
 * element will contain a list of tailwind classes that give the element it's style.
 *
 * Some atoms are made up of "particles" that are smaller and more abstract things. These particles
 * don't even represent an HTML element in particular. They are a list of classes that group common
 * styles among atoms. These can easily be added to classes of user-created elements that aren't an
 * atom. Additionally, particles commonly come from tailwind theme settings.
 *
 * @module atoms
 */
import type { JSX } from 'preact';
import { cn } from '@vyn/cn';
import { KATEX_CSS } from '@deno/gfm';
import type { iAtom, iAtomRecord } from '@lunchbox/ui';
import { area, btn, clr, focus, input, layout, txt } from './particles.ts';

// =====================================================================================================
/**
 * This dictionary contains the atoms that render text.
 *
 * - \`Display\`: The text with the largest font size. For aesthetic or branding purposes.
 * - \`Title\`: The standard text with the largest font size. sed for page titles.
 * - \`Head\`: Short for "heading", this text is for section titles.
 * - \`Subhead\`: Short for "subheading", this text is for sub-section titles.
 * - \`Base\`: The standard text for paragraphs, labels, and other body text.
 * - \`Small\`: The smallest text size, is slightly less accessible and can be used for subtle details.
 *
 * \`\`\`tsx
 * import { Text } from '@lunchbox/ui';
 *
 * <Text.Display>Display text</Text.Display>
 * <Text.Title>Title text</Text.Title>
 * <Text.Head>Head text</Text.Head>
 * <Text.Subhead>Subhead text</Text.Subhead>
 * <Text.Base>Base text</Text.Base>
 * <Text.Small>Small text</Text.Small>
 * \`\`\`
 *
 * @todo Why where these the selection for text types?
 * @todo Remove the \`Text\` dictionary in favor of individual atoms for non base text, include h1,
 *    h2, and h3 for the Title, Head, and Subhead atoms.
 */
export const Text: iAtomRecord = {
  Display: (p: iAtom<HTMLSpanElement>): JSX.Element => (
    <span
      {...p}
      class={cn(
        'block',
        'font-heading',
        'font-bold',
        txt.display,
        clr.brand.txt,
        p.class,
      )}
    />
  ),
  Title: (p: iAtom<HTMLSpanElement>): JSX.Element => (
    <span
      {...p}
      class={cn(
        'block',
        'font-heading',
        'font-bold',
        txt.title,
        clr.brand.txt,
        p.class,
      )}
    />
  ),
  Head: (p: iAtom<HTMLSpanElement>): JSX.Element => (
    <span
      {...p}
      class={cn(
        'block',
        'font-heading',
        txt.head,
        clr.brand.txt,
        p.class,
      )}
    />
  ),
  Subhead: (p: iAtom<HTMLSpanElement>): JSX.Element => (
    <span
      {...p}
      class={cn(
        'block',
        txt.subhead,
        p.class,
      )}
    />
  ),
  Base: (p: iAtom<HTMLSpanElement>): JSX.Element => (
    <span
      {...p}
      class={cn(
        'block',
        txt.base,
        p.class,
      )}
    />
  ),
  Small: (p: iAtom<HTMLSpanElement>): JSX.Element => (
    <span
      {...p}
      class={cn(
        'block',
        txt.small,
        p.class,
      )}
    />
  ),
};

// =====================================================================================================
/**
 * This dictionary contains the atoms that render the page's main semantic sections.
 *
 * - \`Body\`: The entire page's content.
 * - \`Main\`: The main content section of the page.
 * - \`Header\`: The page's header.
 * - \`Footer\`: The page's footer.
 *
 * \`\`\`tsx
 * import { Page } from '@lunchbox/ui';
 *
 * <Page.Body>
 *  <Page.Header>{...}</Page.Header>
 *  <Page.Main>{...}</Page.Main>
 *  <Page.Footer>{...}</Page.Footer>
 * </Page.Body>
 * \`\`\`
 */
export const Page = {
  Body: (p: iAtom<HTMLBodyElement>): JSX.Element => (
    <body
      {...p}
      class={cn(
        'font-base',
        'txt-base',
        clr.panel.bg,
        clr.neutral.txt,
        p.class,
      )}
    />
  ),
  Main: (p: iAtom): JSX.Element => (
    <main
      {...p}
      class={cn(
        clr.page.bg,
        layout,
        'py-3/1',
        'w-full',
        p.class,
      )}
    />
  ),
  Header: (p: iAtom): JSX.Element => (
    <header
      {...p}
      class={cn(
        area,
        layout,
        p.class,
      )}
    />
  ),
  Footer: (p: iAtom): JSX.Element => (
    <footer
      {...p}
      class={cn(
        area,
        layout,
        p.class,
      )}
    />
  ),
};

// =====================================================================================================
/**
 * (description)
 *
 * - \`Brand\`: (description)
 * - \`Page\`: (description)
 * - \`Panel\`: (description)
 * - \`Error\`: (description)
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const Button = {
  Brand: (p: iAtom<HTMLButtonElement>): JSX.Element => (
    <button
      {...p}
      class={cn(
        clr.brand.bg_45,
        'hocus:bg-brand-lc-60 dark:hocus:bg-d-brand-lc-60',
        btn,
        focus,
        p.class,
      )}
    />
  ),
  Page: (p: iAtom<HTMLButtonElement>): JSX.Element => (
    <button
      {...p}
      class={cn(
        clr.page.bg,
        'hocus:bg-panel-35 dark:hocus:bg-d-panel-35',
        btn,
        focus,
        p.class,
      )}
    />
  ),
  Panel: (p: iAtom<HTMLButtonElement>): JSX.Element => (
    <button
      {...p}
      class={cn(
        clr.panel.bg,
        'hocus:bg-panel-50 dark:hocus:bg-d-panel-50',
        btn,
        focus,
        p.class,
      )}
    />
  ),
  Error: (p: iAtom<HTMLButtonElement>): JSX.Element => (
    <button
      {...p}
      class={cn(
        clr.error.bg,
        'hocus:bg-error-lc-50 dark:hocus:bg-d-error-lc-50',
        btn,
        focus,
        p.class,
      )}
    />
  ),
};

// =====================================================================================================
/**
 * (description)
 *
 * - \`ul\`: (description)
 * - \`ol\`: (description)
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const List = {
  ul: (p: iAtom<HTMLUListElement>): JSX.Element => (
    <ul
      {...p}
      class={cn(
        'list-disc',
        'ml-1/1 my-1/4',
        p.class,
      )}
    />
  ),
  ol: (p: iAtom<HTMLUListElement>): JSX.Element => (
    <ul
      {...p}
      class={cn(
        'list-decimal',
        'ml-1/1 my-1/4',
        p.class,
      )}
    />
  ),
};

// =====================================================================================================
/**
 * This dictionary contains the atoms that render codeblocks. This component is usually made up of two
 * atoms, a content atom and a container atom.
 *
 * - \`Content\`: The content part of the codeblock. Must be a child of the container atom.
 * - \`Inline\`: The container part of an inline codeblock, used inside of a paragraph. It must contain
 *    a content atom.
 * - \`Block\`: (IN PROGRESS) The container part of a block codeblock, not to be used inside of a
 *    paragraph because it occupies the full width of the parent element. It must contain a content
 *    atom.
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 * @todo Implement the \`<Code.Block/>\` atom. (ignore this for now)
 */
export const Code = {
  Content: (p: iAtom): JSX.Element => (
    <code
      {...p}
      class={cn(
        clr.brand.txt,
        'leading-[calc(100%-1px)]',
        p.class,
      )}
    />
  ),
  Inline: (p: iAtom<HTMLDivElement>): JSX.Element => (
    <div
      {...p}
      class={cn(
        clr.panel.bg_35,
        clr.brand.txt,
        'inline-block',
        'pt-[3px] pb-[1px] px-[0.5ch]',
        'rounded',
        p.class,
      )}
    />
  ),
  Block: (p: iAtom<HTMLDivElement>): JSX.Element => (
    <div
      class={cn(
        p.class,
      )}
      {...p}
    />
  ),
};

// =====================================================================================================
/**
 * This dictionary contains the atoms that render inputs. Using this atoms as building blocks one
 * could build any type of customized input component. It is recommended to check out the input
 * molecules as they are standard components that are built using these atoms.
 *
 * - \`Field\`:  (description)
 * - \`Label\`:  (description)
 * - \`Container\`:  (description)
 * - \`Text\`:  (description)
 * - \`Error\`:  (description)
 * - \`Required\`:  (description)
 * - \`Radio\`:  (description)
 * - \`Fieldset\`:  (description)
 * - \`Legend\`:  (description)
 * - \`Check\`:  (description)
 * - \`Textarea\`:  (description)
 * - \`Select\`:  (description)
 * - \`Submit\`:  (description)
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const Input = {
  Field: (p: iAtom<HTMLInputElement>): JSX.Element => (
    <input
      {...p}
      class={cn(
        p.class,
        focus,
        clr.neutral.bg_10,
        input.invalid,
        'rounded',
        'px-1/2 py-px',
      )}
    />
  ),
  Label: (p: iAtom<HTMLLabelElement>): JSX.Element => (
    <label
      {...p}
      class={cn('w-full flex', p.class)}
    />
  ),
  Container: (p: iAtom<HTMLDivElement>): JSX.Element => (
    <div
      {...p}
      class={cn('mb-1/2', p.class)}
    />
  ),
  Text: (p: iAtom<HTMLSpanElement>): JSX.Element => (
    <span
      {...p}
      class={cn(
        'pl-1/2 break-all',
        p.class,
      )}
    />
  ),
  Error: (p: iAtom<HTMLSpanElement>): JSX.Element => (
    <span
      {...p}
      class={cn(clr.error.txt, 'pl-1/2', p.class)}
    />
  ),
  Radio: (p: iAtom<HTMLInputElement>): JSX.Element => (
    <input
      type='radio'
      {...p}
      class={cn(
        'appearance-none',
        clr.neutral.bg_10,
        focus,
        input.invalid,
        'rounded-full',
        'h-1/1 w-1/1',
        'checked:before:content-["●"]',
        'grid place-content-center',
        p.class,
      )}
    />
  ),
  Fieldset: (p: iAtom<HTMLFieldSetElement>): JSX.Element => (
    <fieldset
      {...p}
      class={cn(
        'px-1/2 pb-1/2 pt-1/4',
        clr.panel.bg_35,
        p.class,
      )}
    />
  ),
  Legend: (p: iAtom<HTMLLegendElement>): JSX.Element => (
    <legend
      {...p}
      class={cn(p.class)}
    />
  ),
  Check: (p: iAtom<HTMLInputElement>): JSX.Element => (
    <input
      type='checkbox'
      {...p}
      class={cn(
        'appearance-none',
        clr.neutral.bg_10,
        focus,
        input.invalid,
        'rounded',
        'h-1/1 w-1/1',
        'checked:before:content-["✓"]',
        'grid place-content-center',
        p.class,
      )}
    />
  ),
  Textarea: (p: iAtom<HTMLTextAreaElement>): JSX.Element => (
    <textarea
      {...p}
      class={cn(
        'rounded',
        'px-1/2 py-px',
        clr.neutral.bg_10,
        focus,
        p.class,
      )}
    />
  ),
  Select: (p: iAtom<HTMLSelectElement>): JSX.Element => (
    <select
      {...p}
      class={cn(
        'rounded',
        'px-1/2 py-px',
        'h-3/2',
        clr.neutral.bg_10,
        focus,
        p.class,
      )}
    />
  ),
  Submit: (p: iAtom<HTMLInputElement>): JSX.Element => (
    <input
      type='submit'
      {...p}
      class={cn(
        clr.brand.bg_45,
        'hocus:bg-brand-lc-60 dark:hocus:bg-d-brand-lc-60',
        'mt-1/2 mx-auto',
        btn,
        focus,
        p.class,
      )}
    />
  ),
};

// =====================================================================================================
/**
 * This dictionary contains the atoms that render secondary sections of content made using the
 * \`<aside/>\` element, usually for types of sidebars.
 *
 * - \`Sticky\`: (description)
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const Aside = {
  Sticky: (p: iAtom): JSX.Element => (
    <aside
      {...p}
      class={cn(
        'sticky',
        'top-3/1',
        p.class,
      )}
    />
  ),
};

// =====================================================================================================
/**
 * This dictionary contains the atoms that render different types of navigation components.
 *
 * - \`Sticky\`: The sticky navbar stays on the top of the page when scrolling.
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const Nav = {
  Sticky: (p: iAtom): JSX.Element => (
    <nav
      {...p}
      class={cn(
        'sticky',
        'top-0',
        'py-1/4',
        'z-[16]',
        clr.panel.bg,
        layout,
        p.class,
      )}
    />
  ),
};

// =====================================================================================================
/**
 * This dictionary contains the atoms that make up the \`<details/>\` element. A custom one could be
 * built using this atoms, but for most cases the {@link Accordion} molecule is a standard solution.
 *
 * - \`Container\`: The container for the details element that is shown/hidden when a summary atom is
 *    clicked.
 * - \`Summary\`: The summary element that prompts the user to click to show/hide a container atom.
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const Details = {
  Container: (p: iAtom<HTMLDetailsElement>): JSX.Element => (
    <details
      {...p}
      class={cn(
        clr.panel.bg_35,
        'rounded',
        'mb-1/2',
        'px-1/2 py-1/4',
        p.class,
      )}
    />
  ),
  Summary: (p: iAtom): JSX.Element => (
    <summary
      {...p}
      class={cn(
        'py-1/4 px-1/2',
        p.class,
      )}
    />
  ),
};

// =====================================================================================================
/**
 * This atom renders a horizontal rule, replacing the \`<hr/>\` element.
 *
 * \`\`\`tsx
 * import { Separator } from '@lunchbox/ui';
 *
 * <Separator />
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const Separator = (p: iAtom<HTMLHRElement>): JSX.Element => (
  <hr
    class={cn(
      clr.neutral.border,
      'w-full',
      'mt-3/2',
      'h-3/2',
    )}
    {...p}
  />
);

// =====================================================================================================
/**
 * This atom renders a link element, replacing the \`<a/>\` element.
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const Link = (p: iAtom<HTMLAnchorElement>): JSX.Element => (
  <a
    class={cn(
      'text-[inherit]',
      'hocus:text-brand-hc dark:hocus:text-d-brand-hc',
      'underline',
      'cursor-pointer',
      'rounded',
      focus,
    )}
    {...p}
  />
);

// =====================================================================================================
/**
 * This atom renders a keyboard key, replacing the \`<kbd/>\` element.
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const Kbd = (p: iAtom): JSX.Element => (
  <kbd
    {...p}
    class={cn(
      clr.neutral.bg_10,
      clr.neutral.border_25,
      'txt-small',
      'relative bottom-1/8',
      'py-1/4 px-1/3',
      'border-b-[1px]',
      'rounded',
    )}
  />
);

// =====================================================================================================
/**
 * This atom contains style settings for the \`@tailwind/typeography\` plugin and works with the
 * \`deno-gfm\` package to render markdown content. It can be used by itself, but using the
 * {@link Markdown} molecule is highly recommended to avoid redundancies.
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const Prose = (p: iAtom<HTMLDivElement>): JSX.Element => (
  <div
    {...p}
    class={cn(
      'prose dark:prose-invert',
      'prose-h1:font-heading prose-h1:text-title prose-h1:mb-3/2',
      'prose-h2:font-heading prose-h2:text-head prose-h2:mb-1/1 prose-h2:mt-3/1',
      'prose-h3:text-subhead prose-h3:mb-1/2 prose-h3:mt-3/2',
      'prose-a:has-[.anchor]:*:hidden',
      'prose-a:outline-neutral prose-a:dark:outline-d-neutral prose-a:outline-offset-2 prose-a:inline-block',
      'prose-p:mb-1/2',
      'prose-pre:my-1/2',
      'prose-li:my-1/4',
      'prose-ul:mb-1/2 prose-ol:mb-1/2',
      'prose-tr:grid md:prose-tr:table-row',
      'prose-hr:my-2/1',
      'prose-td:py-1/8 prose-td:px-1/2 prose-th:py-1/8 prose-th:px-1/2',
      'prose-img:my-0 prose-img:text-center prose-img:mx-auto',
      'prose-figure:my-1/1 prose-figure:text-center',
      'prose-figcaption:mt-1/4 prose-figcaption:text-center',
      p.class,
    )}
  />
);

// =====================================================================================================
/**
 * This atom renders the CSS styles necessary for the \`deno-gfm\` package to render LaTeX.
 *
 * \`\`\`tsx
 * (example code)
 * \`\`\`
 *
 * @todo Finish documentation
 */
export const KatexStyles = (p: iAtom<HTMLStyleElement>): JSX.Element => (
  <style {...p}>{KATEX_CSS}</style>
);

`;

export const SRC_PARTICLES = `
//   ___          _   _    _
//  | _ \\__ _ _ _| |_(_)__| |___ ___
//  |  _/ _\` | '_|  _| / _| / -_|_-<
//  |_| \\__,_|_|  \\__|_\\__|_\\___/__/
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * This module contains the particles for the Lunchbox UI library.
 *
 * @module particles
 */
import { cn } from '@vyn/cn';

// =====================================================================================================
/**
 * This is a dictionary of particles that represent color styles for text, background, border, and
 * outline. They already contain the dark mode classes, so you don't need to add \`dark:\` to the
 * class name.
 *
 * - \`neutral\`: The default for text, border, and outline. As a background it is a multi-purpose
 *   utility.
 * - \`brand\`: A representation of the brand's personality and identity.
 * - \`error\`: "Red-ish" colors errors.
 * - \`page\`: The default background of the page.
 * - \`panel\`: A background that feels as a physical section for panels.
 *
 * \`\`\`tsx
 * import { clr } from '@lunchbox/ui';
 *
 * <div class={clr.neutral.bg}>Example background</div>
 * <div class={clr.neutral.txt}>Example text</div>
 * \`\`\`
 *
 * @todo Update to new shading syntax in the new tailwind version.
 */
export const clr = {
  neutral: {
    txt: 'text-neutral dark:text-d-neutral',
    txt_10: 'text-neutral-10 dark:text-d-neutral-10',
    txt_25: 'text-neutral-25 dark:text-d-neutral-25',
    bg: 'bg-neutral dark:bg-d-neutral',
    bg_10: 'bg-neutral-10 dark:bg-d-neutral-10',
    bg_25: 'bg-neutral-25 dark:bg-d-neutral-25',
    border: 'border-neutral dark:border-d-neutral',
    border_25: 'border-neutral-25 dark:border-d-neutral-25',
    outline: 'outline-neutral dark:outline-d-neutral',
  },
  brand: {
    txt: 'text-brand-hc dark:text-d-brand-hc',
    txt_25: 'text-brand-hc-25 dark:text-d-brand-hc-25',
    txt_10: 'text-brand-hc-10 dark:text-d-brand-hc-10',
    bg: 'bg-brand-lc dark:bg-d-brand-lc',
    bg_60: 'bg-brand-lc-60 dark:bg-d-brand-lc-60',
    bg_45: 'bg-brand-lc-45 dark:bg-d-brand-lc-45',
    bg_30: 'bg-brand-lc-30 dark:bg-d-brand-lc-30',
  },
  error: {
    txt: 'text-error-hc dark:text-d-error-hc',
    bg: 'bg-error-lc dark:bg-d-error-lc',
    bg_50: 'bg-error-lc-50 dark:bg-d-error-lc-50',
  },
  page: {
    bg: 'bg-page dark:bg-d-page',
    bg_50: 'bg-page-50 dark:bg-d-page-50',
  },
  panel: {
    bg: 'bg-panel dark:bg-d-panel',
    bg_50: 'bg-panel-50 dark:bg-d-panel-50',
    bg_35: 'bg-panel-35 dark:bg-d-panel-35',
    bg_15: 'bg-panel-15 dark:bg-d-panel-15',
  },
};

// =====================================================================================================
/**
 * This is a dictionary of particles that represent parts of inputs that repeat accross multiple atoms
 * or molecules.
 *
 * - \`required\`: The standard required indicator (\`*\`) with a contrasting color.
 * - \`invalid\`: The background of an invalid input.
 * - \`abstract\`: An abstract particle shared in many input atoms.
 *
 * \`\`\`tsx
 * import { input } from '@lunchbox/ui';
 *
 * // Required input label
 * <label class={input.required}>Label text</label>
 * // Usage of the abstract particle
 * <input class={input.abstract} />
 * // Invalid input
 * <input class={input.invalid} />
 * \`\`\`
 */
export const input: Record<string, string> = {
  required: cn(),
  invalid: cn(
    'invalid:bg-error-lc-50 invalid:dark:bg-d-error-lc-50',
  ),
  abstract: cn(
    'border-none',
  ),
};

// =====================================================================================================
/**
 * This is a dictionary of particles that represent the different text sizes and line heights. These
 * are used in the {@link Text} atoms along with other standarized styles. In most cases, the
 * \`<Text.Base/>\` atom is recommended over the \`txt.base\` particle.
 *
 * \`\`\`tsx
 * import { txt } from '@lunchbox/ui';
 *
 * <span class={txt.base}>Base text</span>
 * \`\`\`
 */
export const txt: Record<string, string> = {
  display: 'text-[3.8146972656rem]/[4.5rem]',
  title: 'text-[3.0517578125rem]/[4.5rem]',
  head: 'text-[2.44140625rem]/[3rem]',
  subhead: 'text-[1.5625rem]/[3rem]',
  base: 'text-[1rem]/[1.5rem]',
};

// =====================================================================================================
/**
 * This particle contains the styles that are common between the \`<Page.Header/>\` and
 * \`<Page.Footer/>\` atoms.
 *
 * \`\`\`tsx
 * import { area } from '@lunchbox/ui';
 *
 * <section class={area}>...</section>
 * \`\`\`
 */
export const area: string = cn(
  clr.panel.bg,
  'py-3/1',
);

// =====================================================================================================
/**
 * This is particle contains the styles for the library's grid system container. Children of elements
 * containing this styles should use the extended tailwind \`gridColumn\` settings.
 *
 * \`\`\`tsx
 * import { layout } from '@lunchbox/ui';
 *
 * <div class={layout}>
 *  <div class="grid-cols-12">...</div>
 * </div>
 * \`\`\`
 */
export const layout: string = cn(
  'grid',
  'grid-cols-6 md:grid-cols-12',
  'gap-x-[0.8503100088rem] md:gap-x-[2.1257750221%] lg:gap-x-[1.5rem]',
  'w-auto lg:min-w-min',
  'px-[0.8503100088rem] md:px-[calc(23.13871222%-134.488008342px)] lg:px-auto',
);

// =====================================================================================================
/**
 * This particle contains the styles for any element's focus state.
 *
 * \`\`\`tsx
 * import { focus } from '@lunchbox/ui';
 *
 * <div tabIndex={0} class={focus}>{...</div>
 * \`\`\`
 */
export const focus: string = cn(
  clr.neutral.outline,
  'focus:outline-1',
  'outline-offset-2',
);

// =====================================================================================================
/**
 * This particle contains the styles that are common in button atoms.
 *
 * \`\`\`tsx
 * import { btn } from '@lunchbox/ui';
 *
 * <button class={btn}>Button</button>
 * \`\`\`
 */
export const btn: string = cn(
  'px-3/4 py-1/4',
  'rounded',
);

`;

export const STATIC_FONTS = `
@font-face {
  font-family: 'Fira Code';
  font-weight: 400;
  font-style: normal;
  font-display: swap;
  src: url('./fonts/FiraCode/FiraCode-Regular.woff2') format('woff2');
}

@font-face {
  font-family: 'Fira Code';
  font-weight: 700;
  font-style: normal;
  font-display: swap;
  src: url('./fonts/FiraCode/FiraCode-Bold.woff2') format('woff2');
}

@font-face {
  font-family: 'Figtree';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url('./fonts/Figtree/Figtree-Regular.woff2') format('woff2');
}

@font-face {
  font-family: 'Figtree';
  font-style: italic;
  font-weight: 400;
  font-display: swap;
  src: url('./fonts/Figtree/Figtree-Italic.woff2') format('woff2');
}

@font-face {
  font-family: 'Figtree';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: url('./fonts/Figtree/Figtree-700.woff2') format('woff2');
}

@font-face {
  font-family: 'Libre Caslon Text';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url('./fonts/LibreCaslonText/Libre-Caslon-Text-Regular.woff2')
    format('woff2');
}

@font-face {
  font-family: 'Libre Caslon Text';
  font-style: italic;
  font-weight: 400;
  font-display: swap;
  src: url('./fonts/LibreCaslonText/Libre-Caslon-Text-Italic.woff2')
    format('woff2');
}

@font-face {
  font-family: 'Libre Caslon Text';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: url('./fonts/LibreCaslonText/Libre-Caslon-Text-700.woff2')
    format('woff2');
}

`;

export const SRC_MOLECULES_INPUTRADIOCOMBO = `
//   ___                _   ___         _ _      ___           _
//  |_ _|_ _  _ __ _  _| |_| _ \\__ _ __| (_)___ / __|___ _ __ | |__  ___
//   | || ' \\| '_ \\ || |  _|   / _\` / _\` | / _ \\ (__/ _ \\ '  \\| '_ \\/ _ \\
//  |___|_||_| .__/\\_,_|\\__|_|_\\__,_\\__,_|_\\___/\\___\\___/_|_|_|_.__/\\___/
//           |_|
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * (description)
 *
 * @module molecules/InputRadioCombo
 */
import type { JSX } from 'preact';
import { apDef } from '@lunchbox/ui';
import { Input } from '../atoms.tsx';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
interface iInputRadioCombo {
  label: string;
  name: string;
  required: boolean;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
const d: iInputRadioCombo = {
  label: '',
  name: '',
  required: false,
};

// =====================================================================================================
/**
 * (description)
 */
export default function (props: Partial<iInputRadioCombo>): JSX.Element {
  const p = apDef(d, props);

  return (
    <div>
      <Input.Label class='items-center'>
        <Input.Radio name={p.name} required={p.required} />
        <Input.Text>{p.label}</Input.Text>
      </Input.Label>
    </div>
  );
}

`;

export const SRC_MOLECULES_INPUTTEXTAREACOMBO = `
//   ___                _  _____        _                      ___           _
//  |_ _|_ _  _ __ _  _| ||_   _|____ _| |_ __ _ _ _ ___ __ _ / __|___ _ __ | |__  ___
//   | || ' \\| '_ \\ || |  _|| |/ -_) \\ /  _/ _\` | '_/ -_) _\` | (__/ _ \\ '  \\| '_ \\/ _ \\
//  |___|_||_| .__/\\_,_|\\__||_|\\___/_\\_\\\\__\\__,_|_| \\___\\__,_|\\___\\___/_|_|_|_.__/\\___/
//           |_|
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * (description)
 *
 * @module molecules/InputTextareaCombo
 */
import type { JSX } from 'preact';
import { apDef } from '@lunchbox/ui';
import { input } from '../particles.ts';
import { Input } from '../atoms.tsx';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
interface iInputFieldCombo {
  label: string;
  error: string;
  required: boolean;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
const d: iInputFieldCombo = {
  label: '',
  error: '',
  required: false,
};

// =====================================================================================================
/**
 * (description)
 */
export default function (props: Partial<iInputFieldCombo>): JSX.Element {
  const p = apDef(d, props);

  return (
    <Input.Container>
      <Input.Label class='flex-col'>
        {p.label
          ? (
            <Input.Text class={p.required ? input.required : undefined}>
              <>{p.label}</>
            </Input.Text>
          )
          : null}
        <Input.Textarea required={p.required} />
      </Input.Label>
      {p.error ? <Input.Error>{p.error}</Input.Error> : null}
    </Input.Container>
  );
}

`;

export const SRC_MOLECULES_MARKDOWN = `
//   __  __          _      _
//  |  \\/  |__ _ _ _| |____| |_____ __ ___ _
//  | |\\/| / _\` | '_| / / _\` / _ \\ V  V / ' \\
//  |_|  |_\\__,_|_| |_\\_\\__,_\\___/\\_/\\_/|_||_|
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * (description)
 *
 * @module molecules/Markdown
 *
 * @todo Add the KatexStyles atom to the page's head when the allowMath option is true.
 */
import type { JSX } from 'preact';
import { render, type RenderOptions } from '@deno/gfm';
import { apDef } from '@lunchbox/ui';
import { Prose } from '../atoms.tsx';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
export type iMarkdown = {
  content: string;
  renderOptions: RenderOptions;
};

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
const d: iMarkdown = {
  content: '',
  renderOptions: {
    allowIframes: false,
    allowMath: false,
  },
};

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
function setup(props: Partial<iMarkdown>) {
  const p = apDef<iMarkdown>(d, props);
  p.content = render(p.content, p.renderOptions);
  return p;
}

// =====================================================================================================
/**
 * (description)
 */
export default function (props: Partial<iMarkdown>): JSX.Element {
  const p = setup(props);

  return <Prose dangerouslySetInnerHTML={{ __html: p.content }} />;
}

`;

export const SRC_MOLECULES_ACCORDION = `
//     _                    _ _
//    /_\\  __ __ ___ _ _ __| (_)___ _ _
//   / _ \\/ _/ _/ _ \\ '_/ _\` | / _ \\ ' \\
//  /_/ \\_\\__\\__\\___/_| \\__,_|_\\___/_||_|
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * (description)
 *
 * @module molecules/Accordion
 */
import { Details } from '../atoms.tsx';
import type { ComponentChildren, JSX } from 'preact';
import { apDef } from '@lunchbox/ui';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
interface iFieldsetCheck {
  summary: string;
  name: string;
  open: boolean;
  children: ComponentChildren;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
const d: iFieldsetCheck = {
  summary: '',
  open: false,
  name: 'undefined',
  children: undefined,
};

// =====================================================================================================
/**
 * (description)
 */
export default function (props: Partial<iFieldsetCheck>): JSX.Element {
  const p = apDef(d, props);

  return (
    <Details.Container open={p.open} name={p.name}>
      <Details.Summary>{p.summary}</Details.Summary>
      {p.children}
    </Details.Container>
  );
}

`;

export const SRC_MOLECULES_INPUTCHECKCOMBO = `
//   ___                _    ___ _           _    ___           _
//  |_ _|_ _  _ __ _  _| |_ / __| |_  ___ __| |__/ __|___ _ __ | |__  ___
//   | || ' \\| '_ \\ || |  _| (__| ' \\/ -_) _| / / (__/ _ \\ '  \\| '_ \\/ _ \\
//  |___|_||_| .__/\\_,_|\\__|\\___|_||_\\___\\__|_\\_\\\\___\\___/_|_|_|_.__/\\___/
//           |_|
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * (description)
 * @module molecules/InputCheckCombo
 */
import type { JSX } from 'preact';
import { apDef } from '@lunchbox/ui';
import { Input } from '../atoms.tsx';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
interface iInputCheckCombo {
  label: string;
  error: string;
  name: string;
  required: boolean;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
const d: iInputCheckCombo = {
  label: '',
  error: '',
  name: '',
  required: false,
};

// =====================================================================================================
/**
 * (description)
 */
export default function (props: Partial<iInputCheckCombo>): JSX.Element {
  const p = apDef(d, props);

  return (
    <div>
      <Input.Label class='items-center'>
        <Input.Check name={p.name} required={p.required} />
        <Input.Text>{p.label}</Input.Text>
      </Input.Label>
      {p.error ? <Input.Error>{p.error}</Input.Error> : null}
    </div>
  );
}

`;

export const SRC_MOLECULES_INPUTFIELDCOMBO = `
//   ___                _   ___ _     _    _  ___           _
//  |_ _|_ _  _ __ _  _| |_| __(_)___| |__| |/ __|___ _ __ | |__  ___
//   | || ' \\| '_ \\ || |  _| _|| / -_) / _\` | (__/ _ \\ '  \\| '_ \\/ _ \\
//  |___|_||_| .__/\\_,_|\\__|_| |_\\___|_\\__,_|\\___\\___/_|_|_|_.__/\\___/
//           |_|
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * (description)
 *
 * @module molecules/InputFieldCombo
 */
import type { JSX } from 'preact';
import { cn } from '@vyn/cn';
import { apDef } from '@lunchbox/ui';
import { input } from '../particles.ts';
import { Input } from '../atoms.tsx';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
interface iInputFieldCombo {
  label: string;
  error: string;
  name: string;
  required: boolean;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
const d: iInputFieldCombo = {
  label: '',
  error: '',
  name: '',
  required: false,
};

// =====================================================================================================
/**
 * (description)
 */
export default function (props: Partial<iInputFieldCombo>): JSX.Element {
  const p = apDef(d, props);

  return (
    <Input.Container>
      <Input.Label class='flex-col'>
        {p.label
          ? (
            <Input.Text class={p.required ? input.required : undefined}>
              <>{p.label}</>
            </Input.Text>
          )
          : null}
        <Input.Field
          name={p.name}
          required={p.required}
          class={cn(p.error ? input.invalid : null)}
        />
      </Input.Label>
      {p.error ? <Input.Error>{p.error}</Input.Error> : null}
    </Input.Container>
  );
}

`;

export const SRC_MOLECULES_FIELDSETCHECK = `
//   ___ _     _    _         _    ___ _           _
//  | __(_)___| |__| |___ ___| |_ / __| |_  ___ __| |__
//  | _|| / -_) / _\` (_-</ -_)  _| (__| ' \\/ -_) _| / /
//  |_| |_\\___|_\\__,_/__/\\___|\\__|\\___|_||_\\___\\__|_\\_\\
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * (description)
 *
 * @module molecules/FieldsetCheck
 */
import { Input } from '../atoms.tsx';
import type { JSX } from 'preact';
import { apDef } from '@lunchbox/ui';
import InputCheckCombo from './InputCheckCombo.tsx';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
interface iFieldsetCheck {
  values: string[];
  legend: string;
  error: string;
  name: string;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
const d: iFieldsetCheck = {
  values: [],
  legend: '',
  error: '',
  name: '',
};

// =====================================================================================================
/**
 * (description)
 */
export default function (props: Partial<iFieldsetCheck>): JSX.Element {
  const p = apDef(d, props);

  return (
    <Input.Container>
      <Input.Fieldset>
        {p.legend
          ? (
            <Input.Legend>
              <Input.Text>
                <>{p.legend}</>
              </Input.Text>
            </Input.Legend>
          )
          : null}
        {p.values.map((value) => (
          <InputCheckCombo
            label={value}
            name={p.name}
          />
        ))}
      </Input.Fieldset>
      {p.error ? <Input.Error>{p.error}</Input.Error> : null}
    </Input.Container>
  );
}

`;

export const SRC_MOLECULES_FIELDSETRADIO = `
//   ___ _     _    _         _   ___         _ _
//  | __(_)___| |__| |___ ___| |_| _ \\__ _ __| (_)___
//  | _|| / -_) / _\` (_-</ -_)  _|   / _\` / _\` | / _ \\
//  |_| |_\\___|_\\__,_/__/\\___|\\__|_|_\\__,_\\__,_|_\\___/
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * (description)
 *
 * @module molecules/FieldsetRadio
 */
import type { JSX } from 'preact';
import { apDef } from '@lunchbox/ui';
import { input } from '../particles.ts';
import { Input } from '../atoms.tsx';
import InputRadioCombo from './InputRadioCombo.tsx';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
interface iFieldsetRadio {
  values: string[];
  legend: string;
  error: string;
  name: string;
  required: boolean;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
const d: iFieldsetRadio = {
  values: [],
  legend: '',
  error: '',
  name: '',
  required: false,
};

// =====================================================================================================
/**
 * (description)
 */
export default function (props: Partial<iFieldsetRadio>): JSX.Element {
  const p = apDef(d, props);

  return (
    <Input.Container>
      <Input.Fieldset>
        {p.legend
          ? (
            <Input.Legend>
              <Input.Text class={p.required ? input.required : undefined}>
                <>{p.legend}</>
              </Input.Text>
            </Input.Legend>
          )
          : null}
        {p.values.map((value, index) => (
          <InputRadioCombo
            required={p.required && index === 0}
            label={value}
            name={p.name}
          />
        ))}
      </Input.Fieldset>
      {p.error ? <Input.Error>{p.error}</Input.Error> : null}
    </Input.Container>
  );
}

`;

export const SRC_MOLECULES_INPUTSELECTCOMBO = `
//   ___                _   ___      _        _    ___           _
//  |_ _|_ _  _ __ _  _| |_/ __| ___| |___ __| |_ / __|___ _ __ | |__  ___
//   | || ' \\| '_ \\ || |  _\\__ \\/ -_) / -_) _|  _| (__/ _ \\ '  \\| '_ \\/ _ \\
//  |___|_||_| .__/\\_,_|\\__|___/\\___|_\\___\\__|\\__|\\___\\___/_|_|_|_.__/\\___/
//           |_|
////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * (description)
 *
 * @module molecules/InputSelectCombo
 */
import type { ComponentChildren, JSX } from 'preact';
import { apDef } from '@lunchbox/ui';
import { Input } from '../atoms.tsx';
import { input } from '../particles.ts';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
interface iInputFieldCombo {
  label: string;
  error: string;
  children: ComponentChildren;
  required: boolean;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * (description)
 */
const d: iInputFieldCombo = {
  label: '',
  error: '',
  children: undefined,
  required: false,
};

// =====================================================================================================
/**
 * (description)
 */
export default function (props: Partial<iInputFieldCombo>): JSX.Element {
  const p = apDef(d, props);

  return (
    <Input.Container>
      <Input.Label class='flex-col'>
        {p.label
          ? (
            <Input.Text class={p.required ? input.required : undefined}>
              <>{p.label}</>
            </Input.Text>
          )
          : null}
        <Input.Select required={p.required}>{props.children}</Input.Select>
      </Input.Label>
      {p.error ? <Input.Error>{p.error}</Input.Error> : null}
    </Input.Container>
  );
}

`;

export const EXAMPLES_INIT_MAIN = `
import { App, fsRoutes, staticFiles } from 'fresh';
import { define, type State } from './utils.ts';

export const app = new App<State>();
app.use(staticFiles());

// this is the same as the /api/:name route defined via a file. feel free to delete this!
app.get('/api2/:name', (ctx) => {
  const name = ctx.params.name;
  return new Response(
    \`Hello, \${name.charAt(0).toUpperCase() + name.slice(1)}!\`,
  );
});

// this can also be defined via a file. feel free to delete this!
const exampleLoggerMiddleware = define.middleware((ctx) => {
  console.log(\`\${ctx.req.method} \${ctx.req.url}\`);
  return ctx.next();
});
app.use(exampleLoggerMiddleware);

await fsRoutes(app, {
  dir: './',
  loadIsland: (path) => import(\`./islands/\${path}\`),
  loadRoute: (path) => import(\`./routes/\${path}\`),
});

if (import.meta.main) {
  await app.listen();
}

`;

export const EXAMPLES_INIT_DEV = `
#!/usr/bin/env -S deno run -A --watch=static/,routes/
import { tailwind } from '@fresh/plugin-tailwind';

import { Builder } from 'fresh/dev';
import { app } from './main.ts';

const builder = new Builder();
tailwind(builder, app, {});
if (Deno.args.includes('build')) {
  await builder.build(app);
} else {
  await builder.listen(app);
}

`;

export const EXAMPLES_INIT_DENO = `
{
  "tasks": {
    "check": "deno fmt --check && deno lint && deno check **/*.ts && deno check **/*.tsx",
    "dev": "deno run -A --watch=static/,routes/ dev.ts",
    "build": "deno run -A dev.ts build",
    "start": "deno run -A main.ts",
    "update": "deno run -A -r jsr:@fresh/update ."
  },
  "imports": {
    "@": "./",
    "lunchbox": "./components/lunchbox/index.ts",
    "fresh": "jsr:@fresh/core@^2.0.0-alpha.29",
    "@fresh/plugin-tailwind": "jsr:@fresh/plugin-tailwind@^0.0.1-alpha.7",
    "preact": "npm:preact@^10.25.4",
    "@preact/signals": "npm:@preact/signals@^2.0.1",
    "@deno/gfm": "jsr:@deno/gfm@^0.10.0",
    "@vyn/cn": "jsr:@vyn/cn@^0.1.2",
    "tailwindcss": "npm:tailwindcss@^3.4.3"
  },
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.asynciterable",
      "dom.iterable",
      "deno.ns"
    ],
    "jsx": "precompile",
    "jsxImportSource": "preact",
    "jsxPrecompileSkipElements": [
      "a",
      "img",
      "source",
      "body",
      "html",
      "head"
    ]
  },
  "lint": {
    "rules": {
      "tags": [
        "fresh",
        "recommended"
      ]
    }
  },
  "exclude": [
    "**/_fresh/*"
  ]
}

`;

export const EXAMPLES_INIT_UTILS = `
import { createDefine } from 'fresh';

// deno-lint-ignore no-empty-interface
export interface State {}

export const define = createDefine<State>();

`;

export const EXAMPLES_INIT_TAILWIND = `
import type { Config } from 'tailwindcss';

export default {
  content: [
    '{routes,islands,components}/**/*.{ts,tsx}',
  ],
} satisfies Config;

`;

export const EXAMPLES_INIT_ = `
# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# Fresh build directory
_fresh/
# npm + other dependencies
node_modules/
vendor/


`;

export const EXAMPLES_INIT_STATIC_STYLES = `
@tailwind base;
@tailwind components;
@tailwind utilities;
.fresh-gradient {
  background-color: rgb(134, 239, 172);
  background-image: linear-gradient(
    to right bottom,
    rgb(219, 234, 254),
    rgb(187, 247, 208),
    rgb(254, 249, 195)
  );
}

`;

export const EXAMPLES_INIT_ROUTES_INDEX = `
import { define } from '../utils.ts';

export default define.page(function Home() {
  return (
    <div>
    </div>
  );
});

`;

export const EXAMPLES_INIT_ROUTES__APP = `
import type { PageProps } from 'fresh';

export default function App({ Component }: PageProps) {
  return (
    <html>
      <head>
        <meta charset='utf-8' />
        <meta name='viewport' content='width=device-width, initial-scale=1.0' />
        <title>init</title>
        <link rel='stylesheet' href='/styles.css' />
        <link rel='stylesheet' href='/fonts.css' />
      </head>
      <body>
        <Component />
      </body>
    </html>
  );
}

`;
